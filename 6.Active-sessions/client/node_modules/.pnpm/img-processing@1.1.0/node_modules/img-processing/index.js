import sharp from 'sharp';

//Crop image
async function cropImage(inputPath, outputPath, options) {
    await sharp(inputPath)
        .extract(options)
        .toFile(outputPath);
}

//Resize image
async function resizeImage(inputPath, outputPath, width, height, options) {
    await sharp(inputPath)
        .resize(width, height, options)
        .toFile(outputPath);
}

//Compress image
async function compressImage(inputPath, outputPath, quality) {
    await sharp(inputPath)
        .resize({ quality: quality }) 
        .toFile(outputPath);         
}

//Add watermark 

async function addWatermark(inputImagePath, watermarkImagePath, outputImagePath, position = 'center') {
    const inputImage = sharp(inputImagePath);
    let watermarkImage = sharp(watermarkImagePath);

    const { width: inputWidth, height: inputHeight } = await inputImage.metadata();

    const { width: watermarkWidth, height: watermarkHeight } = await watermarkImage.metadata();

    if (watermarkWidth > inputWidth || watermarkHeight > inputHeight) {
        watermarkImage = watermarkImage.resize({
            width: Math.min(watermarkWidth, inputWidth),
            height: Math.min(watermarkHeight, inputHeight),
        });
    }

    // Calculate the position to overlay the watermark based on the input image size
    let overlayPositionX, overlayPositionY;
    switch (position) {
        case 'top-left':
            overlayPositionX = 0;
            overlayPositionY = 0;
            break;
        case 'top-right':
            overlayPositionX = inputWidth - watermarkWidth;
            overlayPositionY = 0;
            break;
        case 'bottom-left':
            overlayPositionX = 0;
            overlayPositionY = inputHeight - watermarkHeight;
            break;
        case 'bottom-right':
            overlayPositionX = inputWidth - watermarkWidth;
            overlayPositionY = inputHeight - watermarkHeight;
            break;
        case 'center':
        default:
            overlayPositionX = Math.round((inputWidth - watermarkWidth) / 2);
            overlayPositionY = Math.round((inputHeight - watermarkHeight) / 2);
            break;
    }

    // Overlay the watermark onto the input image
    const compositedImage = await inputImage.composite([{
        input: await watermarkImage.toBuffer(),
        left: overlayPositionX,
        top: overlayPositionY,
    }]);

    await compositedImage.toFile(outputImagePath);

    console.log('Watermark added successfully');
}


//Rotate an image
async function rotateImage(inputImagePath, outputImagePath, degrees) {
    const image = sharp(inputImagePath);
    await image.rotate(degrees);
    await image.toFile(outputImagePath);

    console.log('Image rotated successfully');
}

//Flip Image Horizontally
async function flipImageHorizontal(inputImagePath, outputImagePath) {
    const image = sharp(inputImagePath);

    // Flip the image horizontally
    await image.flip();

    await image.toFile(outputImagePath);

    console.log('Image flipped horizontally successfully');
}

//Flip Image Vertically
async function flipImageVertical(inputImagePath, outputImagePath) {

    const image = sharp(inputImagePath);

    // Flip the image vertically
    await image.flop();

    // Save the flipped image to the output path
    await image.toFile(outputImagePath);

    console.log('Image flipped vertically successfully');
}

// Apply blur filter
async function applyBlur(inputImagePath, outputImagePath, sigma = 1) {
    const image = sharp(inputImagePath);
    await image.blur(sigma);
    await image.toFile(outputImagePath);

    console.log('Blur filter applied successfully');
}

// Apply sharpen filter
async function applySharpen(inputImagePath, outputImagePath, sigma = 1) {
    const image = sharp(inputImagePath);
    await image.sharpen(sigma);
    await image.toFile(outputImagePath);

    console.log('Sharpen filter applied successfully');
}

// Apply grayscale filter
async function applyGrayscale(inputImagePath, outputImagePath) {
    const image = sharp(inputImagePath);
    await image.grayscale();
    await image.toFile(outputImagePath);

    console.log('Grayscale filter applied successfully');
}

//Exporting functions
export default {
    cropImage,
    resizeImage,
    compressImage,
    addWatermark,
    rotateImage,
    flipImageHorizontal,
    flipImageVertical,
    applyBlur,
    applyGrayscale,
    applySharpen
};
